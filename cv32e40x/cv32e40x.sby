[tasks]
bmc
pdr
cover
pdr_demo : pdr

[options]
bmc: mode bmc
pdr: mode prove
cover: mode cover
depth 40
multiclock on

# timeout for demo purposes
pdr_demo:
expect timeout
timeout 900
--

# fst is faster than vcd for large designs
fst on
vcd off
# if vcd is required 'vcd_sim on' is a faster alternative to 'vcd off'

[engines]
# keep going to continue after failed assertions
bmc: smtbmc --keep-going
pdr: abc --keep-going pdr
cover: smtbmc

# Script section adapted from cv32e40x-dv/fv/jaspergold.tcl
[script]
# Message Severities
## Allow omitted param defaults
verific -set-info VERI-1818
## Allow parameter treated as localparam
verific -set-info VERI-2418
## Allow empty port in module declaration
verific -set-info VERI-8026

# Additional warning/error messages
## Ignore covergroup warnings
verific -set-info VERI-1333
## Ignore 'new' operator errors
verific -set-info VERI-1685
## Ignore missing driver warnings (reported in Yosys)
verific -set-info VDB-1002

# Analyze & Elaborate
verific -f -sv2012 -formal cv32e40x.f
## formal clock and reset setup
verific -formal formal_setup.sv
## import from verific to yosys
hierarchy -top uvmt_cv32e40x_tb
## cut mult
### should match cv32e40x_ex_stage(B_EXT=B_NONE_cv32e40x_pkg,M_EXT=M_cv32e40x_pkg)_0/mul.mult_i
cutpoint t:$mul
## this flatten is needed to work around an issue with SV interfaces
flatten
## prepare design
prep -flatten

# Assumes
chformal -assert2assume */*_memory_assert_i.u_assert.a_r_after_a
chformal -assert2assume */*.obi_*_memory_assert_i.*.a_*par
chformal -assert2assume */*integration_assert_i.a_stable_*
chformal -assert2assume */*integration_assert_i.a_aligned_*
chformal -assert2assume */*integration_assert_i.a_no_scan_cg

# List properties
tee -o ../props.txt log Cover cells:
tee -a ../props.txt select t:$cover -list
tee -a ../props.txt log
tee -a ../props.txt log Assert cells:
tee -a ../props.txt select t:$assert -list
tee -a ../props.txt log
tee -a ../props.txt log Assume cells:
tee -a ../props.txt select t:$assume -list

# File cv32e40x.f adapted from cv32e40x-dv/fv/fv.flist
[file cv32e40x.f]
+incdir+${DV_UVMT_PATH}
+incdir+${DV_UVME_PATH}
+incdir+${DV_UVMA_PATH}/uvma_rvfi
+incdir+${DV_UVMA_PATH}/uvma_fencei
+incdir+${DV_UVMA_PATH}/uvma_clic
+incdir+${DV_UVMA_PATH}/uvma_obi_memory/src
+incdir+${DV_UVM_TESTCASE_PATH}/base-tests

./uvm_pkg.sv
./defines.sv

-f  ${CV_CORE_PKG}/cv32e40x_manifest.flist
-f  ${DV_ISA_DECODER_PATH}/isa_decoder_pkg.flist
-f  ${DV_SUPPORT_PATH}/support_pkg.flist
${DV_UVM_TESTCASE_PATH}/base-tests/uvmt_cv32e40x_base_test_pkg.sv
${DV_UVMA_PATH}/uvma_obi_memory/src/uvma_obi_memory_assert.sv
${DV_UVMA_PATH}/uvma_obi_memory/src/uvma_obi_memory_1p2_assert.sv

./dummy_pkg.sv

${DV_UVMA_PATH}/uvma_clic/uvma_clic_if.sv
${DV_UVMA_PATH}/uvma_debug/uvma_debug_if.sv
${DV_UVMA_PATH}/uvma_fencei/uvma_fencei_if.sv
${DV_UVMA_PATH}/uvma_interrupt/uvma_interrupt_if.sv
${DV_UVMA_PATH}/uvma_obi_memory/src/uvma_obi_memory_assert_if_wrp.sv
${DV_UVMA_PATH}/uvma_obi_memory/src/uvma_obi_memory_if.sv
${DV_UVMA_PATH}/uvma_rvfi/uvma_rvfi_csr_if.sv
${DV_UVMA_PATH}/uvma_rvfi/uvma_rvfi_instr_if.sv
${DV_UVMA_PATH}/uvma_wfe_wu/uvma_wfe_wu_if.sv
${DV_UVME_PATH}/uvme_cv32e40x_core_cntrl_if.sv
${DV_UVMT_PATH}/uvmt_cv32e40x_tb_ifs.sv

-f  ${DV_UVMT_PATH}/uvmt_cv32e40x_tb_files.flist

[files]
# copy files from cv32e40x-dv/fv/, everything else is referenced in-place
core-v-verif/cv32e40x/fv/uvm_pkg.sv
core-v-verif/cv32e40x/fv/defines.sv
core-v-verif/cv32e40x/fv/dummy_pkg.sv

# Clock & Reset
[file formal_setup.sv]
module formal_setup();
    (* gclk *) reg gclk;
    reg clk = '0;
    always @(posedge gclk)
        clk <= !clk;

    reg [3:0] rst_counter = 2;
    always @(posedge clk)
        if (rst_counter)
            rst_counter -= 1;

    wire rst = rst_counter > 0;

    always @* begin
        setup_clk: assume (uvmt_cv32e40x_tb.clknrst_if.clk == clk);
        setup_rst: assume (uvmt_cv32e40x_tb.clknrst_if.reset_n == !rst);
    end

endmodule
bind uvmt_cv32e40x_tb formal_setup formal_setup_inst(.*);
