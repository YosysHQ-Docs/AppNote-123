Verifying the VeeR core
-----------------------

This example uses the `VeeR EH1 RISC-V Core`_.  In a new folder, run ``git clone
https://github.com/chipsalliance/Cores-VeeR-EH1``.

.. _VeeR EH1 RISC-V Core: https://github.com/chipsalliance/Cores-VeeR-EH1

.. note::

    This example requires Yosys built with Verific for parsing the input design.
    Ask us for an `evaluation license`_ for TabbyCAD to try this yourself.

.. _evaluation license: https://www.yosyshq.com/contact

Loading the design
~~~~~~~~~~~~~~~~~~

In the same directory as ``Cores-VeeR-EH1``, run ``sby --init-config-file
veer``.  This will produce a file, ``veer.sby`` with the following content:

.. literalinclude:: _examples/veer_1.sby
    :language: sby
    :caption: ``veer.sby`` generated from ``sby --init-config-file veer``

Next up we need to add all of the files to ``veer.sby`` and read them into
Yosys.  The VeeR core comes with a handy |veer.core|_ file which lists all of
the RTL source and includes needed.  We're going to make a command file called
``veer.f`` which we can read with Verific to load all of our source files
together.

First, we start with the include directories.  Both include files listed are in
the ``design/include/`` directory, so we can use a single
``+incdir+design/include``.  Next we want to list all of the source files: copy
the list from |veer.core|_ and make sure to remove the ``-`` and any indentation
at the start of each line.  You should end up with something like the following:

.. |veer.core| replace:: ``veer.core``
.. _veer.core: https://github.com/chipsalliance/Cores-VeeR-EH1/blob/main/veer.core

.. literalinclude:: _examples/veer_2.sby
    :language: sby
    :start-at: [file veer.f]
    :end-before: [files]

We have included two extra lines in there, one for
``+incdir+snapshots/default``, and one for
``snapshots/default/common_defines.vh``.  The ``snapshots/default`` directory is
generated by the ``configs/veer.config`` perl script and provides macro
definitions which configure the VeeR core as needed.  Provided perl is installed
on the system, we can get Yosys to call this script for us when we run SBY.  We
also need to update the ``[script]`` section to read our new ``veer.f`` command
file and change the top module to ``veer_wrapper``.  This gives us the
following:

.. literalinclude:: _examples/veer_2.sby
    :language: sby
    :start-at: [script]
    :end-before: [file veer.f]

The perl script expects an environment variable, ``RV_ROOT``, which defines the
root location in which to generate.  By using ``bash -c`` we can use the SBY
output directory (accessed via ``$PWD``) as this root location.  The ``-f`` flag
in the ``read`` command is passed to Verific to signal that a command file is
being read.

Finally we have the ``[files]`` section:

.. literalinclude:: _examples/veer_2.sby
    :language: sby
    :start-at: [files]

In addition to the source files in the ``design`` directory, we are also
including the config script in ``configs``, which itself references the files in
the ``tools`` directory.  By defining ``veer.f`` in the SBY file, we skip the
need to include it in the files list.

Running SBY now we might see something like the following:

..
  
    SBY [veer] prep: ERROR: CLK tck on $verific$ir_reg$design/dmi/rvjtag_tap.sv:142$7750 ($dff) from module rvjtag_tap_default also used with opposite polarity, run clk2fflogic instead.

This tells us that we have a clock signal, ``tck`` in this case, which is
triggering on both positive and negative edges.  This means we need to enable
multiclock mode by adding ``multiclock on`` to the ``[options]`` section.  At
this point we can now run BMC and get our first failed counter trace.  The model
checker can start the design in any state, including those which would normally
be unreachable, so it might not be a very useful trace, but we have managed to
successfully get the design all the way to the solvers.
